package kmp;

import java.util.Scanner;

public class KmpStr {

    private static final String str = "abbcaabadaabbca";

    /**
     * 前缀: 除最后一个字符以外的前缀组合
     * 后缀: 除第一个字符以外的前缀组合
     * <p>
     * 前缀: a,ab,abb,abbc
     * 后缀: bbca,bca,bc,a
     * 共有长度为 a, length =  1
     */
    private static final String searchStr = "abbca";

    /**
     * 字典表
     * <p>
     * | a | b | b | a |
     * 匹配:
     * | 0 | 0 | 0 | 1 |
     */

/*    public static void main(String[] args) {
        comp(str, searchStr);
        System.out.println("");
    }*/

    /**
     * 移动位数 = 已匹配的字符数 - 对应的部分匹配值
     *
     * @param str       字符串
     * @param searchStr 搜索字符串
     */
    public static void comp(String str, String searchStr) {
        char[] chars = str.toCharArray();
        for (int i = 0; i < chars.length; i++) {


        }

    }

    static char[] s, p;
    static int[] nxt = new int[100000];

    public static void main(String[] args) {
        input();
        buildNxt();
        search();
        output();


    }

    static void search() {
        int tar = 0, pos = 0;
        while (tar < s.length) {
            if (s[tar] == p[pos]) {
                tar++;
                pos++;
            } else if (pos != 0) {
                pos = nxt[pos - 1];
            } else
                tar++;
            if (pos == p.length) {
                System.out.println(tar - pos + 1);
                pos = nxt[pos - 1];
            }
        }
    }

    /**
     * 是KMP算法的精髓所在，核心思想是“P自己与自己做匹配”。
     * “k-前缀” 为一个字符串的前 k 个字符； “k-后缀” 为一个字符串的后 k 个字符。k 必须小于字符串长度。
     * next[x] 定义为： P[0]~P[x] 这一段字符串，使得k-前缀恰等于k-后缀的最大的k.
     */
    static void buildNxt() {
        int i = 1, now = 0;
        while (i < p.length) {
            char pi = p[i];
            char pn = p[now];
            if (pi == pn) {
                now++;
                nxt[i] = now;
                i++;
            } else if (now != 0) {
                now = nxt[now - 1];
            } else {
                i++;
                nxt[i] = now;
            }
        }
    }

    static void output() {
        for (int i = 0; i < p.length; i++) {
            System.out.printf("%d", nxt[1]);
        }

    }

    static void input() {
//        Scanner in = new Scanner(System.in);
        String str, pat;
        str = "xabcdababcdef";
        pat = "abaabac";
        s = str.toCharArray();
        p = pat.toCharArray();
//        in.close();
    }



}
