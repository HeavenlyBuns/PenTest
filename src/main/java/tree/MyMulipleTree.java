package tree;

import java.util.*;

/**
 * 多叉树类
 */
public class MyMulipleTree {

    public static void main(String[] args) {
        List<HashMap> dataList = GenerictorNode.generictorNode();

        HashMap<String, Node2> nodeMap = new HashMap();
        for (HashMap map : dataList) {
            String id = (String) map.get("id");
            String text = (String) map.get("text");
            String parentId = (String) map.get("parentId");
            Node2 node2 = new Node2(id, text, parentId);
            nodeMap.put(id, node2);
        }
        Node2 root = null;

        Iterator<Map.Entry<String, Node2>> iterator = nodeMap.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, Node2> next = iterator.next();
            Node2 value = next.getValue();
            if (value.parentId == null || "".equals(value.parentId)) {
                root = value;

            } else {
                Node2 node2 = nodeMap.get(value.parentId);
                node2.addChild(value);

            }
        }
        System.out.println(root);
        root.sortCollection();
        System.out.println(root);

    }

}

class Node2 {
    public String id;
    private String name;
    public String parentId;
    private Children2 children = new Children2();

    public Node2(String id, String name, String parentId) {
        this.id = id;
        this.name = name;
        this.parentId = parentId;
    }

    public void addChild(Node2 node) {
        children.addChildre(node);

    }

    @Override
    public String toString() {
        String result = "{"
                + "id : '" + id + "'"
                + ", text : '" + name + "'";

        if (children != null && children.getSize() != 0) {
            result += ", children : " + children.toString();
        } else {
            result += ", leaf : true";
        }

        return result + "}";
    }

    public void sortCollection() {
        if (children.getSize() > 0)
            children.sortCllection();

    }
}

class Children2 {
    private List<Node2> list = new ArrayList<>();

    public int getSize() {
        return list.size();

    }

    public void addChildre(Node2 node) {
        list.add(node);

    }

    @Override
    public String toString() {
        String result = "[";
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            result += ((Node2) it.next()).toString();
            result += ",";

        }
        return result + " ]";

    }

    public void sortCllection() {
        Comparator<Node2> comparator = new Comparator<Node2>() {
            @Override
            public int compare(Node2 o1, Node2 o2) {
                Integer id1 = Integer.parseInt(o1.id);
                Integer id2 = Integer.parseInt(o2.id);
                return id1 < id2 ? -1 : (id1 == id2 ? 0 : 1);
            }
        };
        Collections.sort(list, comparator);
        Iterator<Node2> iterator = list.iterator();
        while (iterator.hasNext()) {
            Node2 next = iterator.next();
            next.sortCollection();

        }


    }
}

class GenerictorNode {
    public static List<HashMap> generictorNode() {
        List<HashMap> dataList = new ArrayList();
        HashMap dataRecord1 = new HashMap();
        dataRecord1.put("id", "112000");
        dataRecord1.put("text", "廊坊银行解放道支行");
        dataRecord1.put("parentId", "110000");

        HashMap dataRecord2 = new HashMap();
        dataRecord2.put("id", "112200");
        dataRecord2.put("text", "廊坊银行三大街支行");
        dataRecord2.put("parentId", "112000");

        HashMap dataRecord3 = new HashMap();
        dataRecord3.put("id", "112100");
        dataRecord3.put("text", "廊坊银行广阳道支行");
        dataRecord3.put("parentId", "112000");

        HashMap dataRecord4 = new HashMap();
        dataRecord4.put("id", "113000");
        dataRecord4.put("text", "廊坊银行开发区支行");
        dataRecord4.put("parentId", "110000");

        HashMap dataRecord5 = new HashMap();
        dataRecord5.put("id", "100000");
        dataRecord5.put("text", "廊坊银行总行");
        dataRecord5.put("parentId", "");

        HashMap dataRecord6 = new HashMap();
        dataRecord6.put("id", "110000");
        dataRecord6.put("text", "廊坊分行");
        dataRecord6.put("parentId", "100000");

        HashMap dataRecord7 = new HashMap();
        dataRecord7.put("id", "111000");
        dataRecord7.put("text", "廊坊银行金光道支行");
        dataRecord7.put("parentId", "110000");

        dataList.add(dataRecord1);
        dataList.add(dataRecord2);
        dataList.add(dataRecord3);
        dataList.add(dataRecord4);
        dataList.add(dataRecord5);
        dataList.add(dataRecord6);
        dataList.add(dataRecord7);
        return dataList;

    }

}
