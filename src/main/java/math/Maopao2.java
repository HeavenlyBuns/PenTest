package math;

public class Maopao2 {

    public static void main(String[] args) {
        int arr[] = new int[]{32, 54, 1, 2, 5, 53, 33, 98};
        sort2(arr);
//        binaryInsertSort(arr);
        print(arr);
        binaryFind(arr, 98);

    }

    public static void print(int[] arr) {
        for (int a : arr) {
            System.out.print(a + " ");
        }
    }

    /**
     * 冒泡排序
     *
     * @param arr
     */
    public static void sort2(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void binaryFind(int[] arr, int idx) {
        int start = 0;
        int end = arr.length;
        int binary = (start + end) / 2;
        if (arr[binary] <= idx) {
            while (arr[binary] != -1) {
                if (arr[binary] == idx) {
                    System.out.println("找到了: " + arr[binary]);
                    return;

                }
                binary++;
            }
        } else {
            while (arr[binary] != -1) {
                if (arr[binary] == idx) {
                    System.out.println("找到了: " + arr[binary]);
                    return;

                }
                binary--;

            }
        }
    }

    public static void binaryInsertSort(int[] array) {
        int low, high, mid;
        for (int i = 2; i < array.length; i++) {
//			哨兵位
            array[0] = array[i];
//			要将第i位插入前i-1有序序列
            low = 1;
            high = i - 1;
//			折半查找
            while (low <= high) {
                mid = (low + high) / 2;
                System.out.println("low " + low + " high " + high + " mid " + mid);
                if (array[0] < array[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
//			要插入high+1位置，需要把high+1——i-1位置上的数据依次后移一位
            for (int j = i - 1; j >= high + 1; j--) {
                array[j + 1] = array[j];
            }
            array[high + 1] = array[0];
        }
    }


}
